{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { HostBinding, Input, ViewChild, ViewContainerRef } from '@angular/core';\nimport { toScreamingSnakeCase } from './utils';\nimport { toChangeObservable } from './toChangeObservable';\nexport class FormValidationContainer {\n  elRef;\n  renderer;\n  messageProvider;\n  cdRef;\n  componentFactoryResolver;\n  validationErrorsConfig;\n  customErrorMessages = {};\n  messageParams = {};\n  validationDisabled = false;\n  innerValidationError;\n  errorsContainer;\n  messages;\n  validationContext;\n  componentRef;\n  hasErrors;\n  hasSuccess;\n  subscription;\n  constructor(elRef, renderer, messageProvider, cdRef, componentFactoryResolver, validationErrorsConfig) {\n    this.elRef = elRef;\n    this.renderer = renderer;\n    this.messageProvider = messageProvider;\n    this.cdRef = cdRef;\n    this.componentFactoryResolver = componentFactoryResolver;\n    this.validationErrorsConfig = validationErrorsConfig;\n    this.validationContext = validationErrorsConfig.defaultContext;\n  }\n  ngAfterContentInit() {\n    this.addErrorComponent();\n    this.subscription = toChangeObservable(this.formControl).subscribe(value => {\n      this.checkErrors();\n      this.checkSuccess();\n      this.updateErrorComponent();\n    });\n  }\n  ngOnDestroy() {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n  addErrorComponent() {\n    if (this.errorsContainer && !this.componentRef) {\n      this.errorsContainer.clear();\n      const componentFactory = this.componentFactoryResolver.resolveComponentFactory(this.validationErrorsConfig.errorComponent);\n      this.componentRef = this.errorsContainer.createComponent(componentFactory);\n    }\n  }\n  updateErrorComponent() {\n    if (this.componentRef) {\n      this.componentRef.instance.innerValidationError = this.innerValidationError;\n      this.componentRef.instance.messages = this.messages;\n      this.componentRef.instance.params = this.messageParams;\n    }\n  }\n  checkErrors() {\n    const hasError = !this.formControl.valid && this.formControl.dirty && this.formControl.touched && !this.validationDisabled;\n    if (hasError && this.el && this.el.nativeElement) {\n      this.messages = Object.keys(this.formControl.errors || {}).map(error => {\n        const fieldName = this.formControlName;\n        const errorKey = `${toScreamingSnakeCase(fieldName + '')}.ERRORS.${toScreamingSnakeCase(error)}`;\n        if (this.messageProvider && this.messageProvider.instant(`${this.validationContext}.${errorKey}`) === `${this.validationContext}.${errorKey}`) {\n          return `${this.validationErrorsConfig.defaultContext}.ERRORS.${toScreamingSnakeCase(error)}`;\n        } else {\n          return `${this.validationContext}.${errorKey}`;\n        }\n      });\n      const params = Object.values(this.formControl.errors || {}).reduce((a, b) => {\n        a = {\n          ...a,\n          ...b\n        };\n        return a;\n      }, {});\n      this.messageParams = this.messageParams ? {\n        ...this.messageParams,\n        ...params\n      } : params;\n      if (this.messages && this.messages.length > 0) {\n        this.messages = [this.messages[0]];\n      }\n      try {\n        this.renderer.removeClass(this.el.nativeElement, 'is-valid');\n      } catch (e) {}\n      this.renderer.addClass(this.el.nativeElement, 'is-invalid');\n    }\n    this.hasErrors = hasError;\n  }\n  checkSuccess() {\n    const hasSuccess = this.formControl.valid && this.formControl.dirty && this.formControl.touched && !this.validationDisabled;\n    if (hasSuccess && this.el && this.el.nativeElement) {\n      this.messages = [];\n      try {\n        this.renderer.removeClass(this.el.nativeElement, 'is-invalid');\n      } catch (e) {}\n    }\n    this.hasSuccess = hasSuccess;\n  }\n  setValidationContext(context) {\n    this.validationContext = context;\n  }\n  setInnerValidation(innerValidation) {\n    this.innerValidationError = innerValidation;\n  }\n  clear() {\n    this.formControl.reset();\n    this.formControl.setErrors(null);\n    this.renderer.removeClass(this.el.nativeElement, 'is-valid');\n    this.renderer.removeClass(this.el.nativeElement, 'is-invalid');\n    this.messages = [];\n  }\n}\n__decorate([Input()], FormValidationContainer.prototype, \"customErrorMessages\", void 0);\n__decorate([Input()], FormValidationContainer.prototype, \"messageParams\", void 0);\n__decorate([Input()], FormValidationContainer.prototype, \"validationDisabled\", void 0);\n__decorate([Input()], FormValidationContainer.prototype, \"innerValidationError\", void 0);\n__decorate([ViewChild('errorsContainer', {\n  read: ViewContainerRef,\n  static: true\n})], FormValidationContainer.prototype, \"errorsContainer\", void 0);\n__decorate([HostBinding('class.has-error')], FormValidationContainer.prototype, \"hasErrors\", void 0);\n__decorate([HostBinding('class.has-success')], FormValidationContainer.prototype, \"hasSuccess\", void 0);","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}