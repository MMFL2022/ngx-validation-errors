{"ast":null,"code":"import { ControlContainer, FormGroup, FormGroupDirective } from '@angular/forms';\nimport { VALIDATION_ERROR_CONFIG } from './error-validation-config';\nimport { toScreamingSnakeCase } from './utils';\nimport { MESSAGES_PROVIDER } from './injection-tokens';\nimport * as i0 from \"@angular/core\";\nexport class ForFieldErrorsContext {\n  errors;\n  constructor(errors) {\n    this.errors = errors;\n  }\n}\nlet FormFieldEmptyContainerDirective = /*#__PURE__*/(() => {\n  class FormFieldEmptyContainerDirective {\n    renderer;\n    viewContainer;\n    template;\n    messageProvider;\n    validationErrorsConfig;\n    // tslint:disable-next-line:variable-name\n    formControlRef;\n    customErrorMessages = {};\n    messageParams = {};\n    validationDisabled = false;\n    rootEl;\n    messages;\n    validationContext;\n    context = {\n      errors: []\n    };\n    constructor(renderer, viewContainer, template,\n    // @Optional() form: FormGroupDirective,\n    messageProvider, validationErrorsConfig) {\n      this.renderer = renderer;\n      this.viewContainer = viewContainer;\n      this.template = template;\n      this.messageProvider = messageProvider;\n      this.validationErrorsConfig = validationErrorsConfig;\n      this.validationContext = validationErrorsConfig.defaultContext;\n      const nodes = this.viewContainer.createEmbeddedView(this.template, this.context);\n      this.rootEl = nodes.rootNodes[0];\n    }\n    ngDoCheck() {\n      const hasError = !this.formControl.valid && this.formControl.touched && !this.validationDisabled;\n      let messages;\n      if (hasError) {\n        messages = Object.keys(this.formControl.errors || {}).map(error => {\n          const fieldName = this.formControlName;\n          const errorKey = `${toScreamingSnakeCase(fieldName)}.ERRORS.${toScreamingSnakeCase(error)}`;\n          if (this.messageProvider && this.messageProvider.instant(`${this.validationContext}.${errorKey}`) === `${this.validationContext}.${errorKey}`) {\n            return `${this.validationErrorsConfig.defaultContext}.ERRORS.${toScreamingSnakeCase(error)}`;\n          } else {\n            return `${this.validationContext}.${errorKey}`;\n          }\n        });\n        const params = Object.values(this.formControl.errors || {}).reduce((a, b) => {\n          a = {\n            ...a,\n            ...b\n          };\n          return a;\n        }, {});\n        this.messageParams = this.messageParams ? {\n          ...this.messageParams,\n          ...params\n        } : params;\n        if (messages && messages.length > 0) {\n          messages = [messages[0]];\n        }\n      }\n      if (messages && !this.messages || !messages && this.messages || messages && messages[0] !== this.messages[0]) {\n        this.messages = messages;\n        this.context.errors = messages;\n        if (this.rootEl) {\n          if (messages) {\n            this.renderer.addClass(this.rootEl, 'has-error');\n          } else {\n            this.renderer.removeClass(this.rootEl, 'has-error');\n          }\n        }\n      }\n    }\n    setValidationContext(context) {\n      this.validationContext = context;\n    }\n    setInnerValidation(innerValidation) {}\n    clear() {\n      this.formControl.reset();\n      this.formControl.setErrors(null);\n      this.messages = [];\n      this.context.errors = undefined;\n    }\n    get formControl() {\n      return this.formControlRef;\n    }\n    get formControlName() {\n      if (this.formControlRef['_parent'] instanceof FormGroup) {\n        const form = this.formControlRef['_parent'];\n        const name = Object.keys(form.controls).find(k => form.controls[k] === this.formControlRef);\n        return name;\n      }\n      return 'field';\n    }\n    static ɵfac = function FormFieldEmptyContainerDirective_Factory(t) {\n      return new (t || FormFieldEmptyContainerDirective)(i0.ɵɵdirectiveInject(i0.Renderer2), i0.ɵɵdirectiveInject(i0.ViewContainerRef), i0.ɵɵdirectiveInject(i0.TemplateRef), i0.ɵɵdirectiveInject(MESSAGES_PROVIDER, 8), i0.ɵɵdirectiveInject(VALIDATION_ERROR_CONFIG));\n    };\n    static ɵdir = /*@__PURE__*/i0.ɵɵdefineDirective({\n      type: FormFieldEmptyContainerDirective,\n      selectors: [[\"\", \"ngxValidationErrors\", \"\"]],\n      inputs: {\n        formControlRef: [\"ngxValidationErrors\", \"formControlRef\"],\n        customErrorMessages: \"customErrorMessages\",\n        messageParams: \"messageParams\",\n        validationDisabled: \"validationDisabled\"\n      },\n      features: [i0.ɵɵProvidersFeature([{\n        provide: ControlContainer,\n        useExisting: FormGroupDirective\n      }])]\n    });\n  }\n  return FormFieldEmptyContainerDirective;\n})();\nexport { FormFieldEmptyContainerDirective };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}