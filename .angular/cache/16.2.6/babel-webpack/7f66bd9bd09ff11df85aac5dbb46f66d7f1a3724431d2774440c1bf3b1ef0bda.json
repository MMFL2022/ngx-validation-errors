{"ast":null,"code":"import { FormArray, FormGroup } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nlet FormSubmitDirective = /*#__PURE__*/(() => {\n  class FormSubmitDirective {\n    constructor() {}\n    onSubmit(event) {\n      this.markControlsDirty(this.appFormSubmit);\n    }\n    markControlsDirty(group) {\n      Object.keys(group.controls).forEach(key => {\n        const abstractControl = group.controls[key];\n        if (abstractControl instanceof FormGroup || abstractControl instanceof FormArray) {\n          this.markControlsDirty(abstractControl);\n        } else {\n          abstractControl.markAsDirty();\n          abstractControl.markAsTouched();\n          abstractControl.updateValueAndValidity();\n        }\n      });\n    }\n    static #_ = this.ɵfac = function FormSubmitDirective_Factory(t) {\n      return new (t || FormSubmitDirective)();\n    };\n    static #_2 = this.ɵdir = /*@__PURE__*/i0.ɵɵdefineDirective({\n      type: FormSubmitDirective,\n      selectors: [[\"\", \"appFormSubmit\", \"\"]],\n      hostBindings: function FormSubmitDirective_HostBindings(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵlistener(\"submit\", function FormSubmitDirective_submit_HostBindingHandler($event) {\n            return ctx.onSubmit($event);\n          });\n        }\n      },\n      inputs: {\n        appFormSubmit: \"appFormSubmit\"\n      }\n    });\n  }\n  return FormSubmitDirective;\n})();\nexport { FormSubmitDirective };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}