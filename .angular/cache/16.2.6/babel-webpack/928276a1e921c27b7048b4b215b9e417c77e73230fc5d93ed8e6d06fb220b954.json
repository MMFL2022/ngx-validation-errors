{"ast":null,"code":"import { merge, Subject } from 'rxjs';\nimport { debounceTime } from 'rxjs/operators';\nfunction wrapMethod(subject$, name, control) {\n  const prevMethod = control[name];\n  function wrappedMethod(...args) {\n    prevMethod.bind(control)(...args);\n    subject$.next();\n  }\n  control[name] = wrappedMethod;\n}\nexport function toChangeObservable(control) {\n  const touchedChanges$ = new Subject();\n  wrapMethod(touchedChanges$, 'markAsTouched', control);\n  wrapMethod(touchedChanges$, 'markAsUntouched', control);\n  wrapMethod(touchedChanges$, 'markAsDirty', control);\n  wrapMethod(touchedChanges$, 'markAsPristine', control);\n  const obs = merge(touchedChanges$, control.statusChanges);\n  return obs.pipe(debounceTime(100));\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}